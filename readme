# GitHub Authentication Manager (GHAM)

GHAM is a lightweight, secure CLI utility that enables seamless management of GitHub authentication contexts. It helps developers working with multiple GitHub accounts (personal, professional, client-based) by abstracting away the complexity of credential switching.

## Features (MVP)

*   **Multi-context Management**: Define and store multiple GitHub account contexts (name, username, email, PAT).
*   **Secure PAT Storage**: Uses OS-specific keychains (macOS Keychain, Windows Credential Manager, Linux Secret Service) via `go-keyring`.
*   **Repository-specific Context Assignment**: Assign a GHAM context to a local Git repository.
*   **Automatic Context Switching (via Git Wrapper)**: When you run `gham git ...` commands within an assigned repository, GHAM injects the correct user/email and PAT for HTTPS operations.

## Installation

1.  **Prerequisites**:
    *   Go (version 1.20+ recommended).
    *   A C compiler (gcc/clang) might be needed for `go-keyring` (CGO).
    *   A system keyring service (e.g., `libsecret` on Linux, macOS Keychain, Windows Credential Manager).

2.  **Build from Source**:
    ```bash
    git clone https://github.com/yourusername/gham.git # <<<< REPLACE yourusername
    cd gham
    go build -o gham .
    # Optionally, install it to your PATH, e.g., /usr/local/bin or ~/bin
    # sudo mv gham /usr/local/bin/gham
    # Or for user-local:
    # mkdir -p ~/bin && mv gham ~/bin/
    # (ensure ~/bin is in your PATH)
    ```
    You can also build with version information:
    ```bash
    go build -ldflags="-X main.AppVersion=0.1.0" -o gham .
    ```

## Usage

Replace `yourusername` with your actual GitHub username.

```bash
# Get help
gham --help
gham context --help
gham repo --help
gham git --help

# 1. Add a new GitHub context (e.g., for your personal account)
# You will be prompted for the PAT if not provided with --token
gham context add personal --email "my.personal.email@example.com" --username "MyPersonalUsername"
# Enter PAT when prompted

# 2. Add another context (e.g., for work)
gham context add work --token "YOUR_WORK_PAT_HERE" --email "work.email@company.com" --username "MyWorkUsername"

# 3. List configured contexts
gham context list

# 4. Navigate to a local Git repository
cd ~/projects/my-work-project

# 5. Assign the 'work' context to this repository
# GHAM will detect the repo root.
gham repo assign work
# Or specify path: gham repo assign work /path/to/my-work-project

# 6. Check current repository's assigned context
gham repo current

# 7. Use GHAM to wrap Git commands for this repository
# These commands will now use the 'work' context's credentials and user/email
gham git status
gham git pull
gham git commit -m "New feature for work"
gham git push

# If you 'cd' into a personal project assigned to 'personal' context:
cd ~/projects/my-personal-project
# (Assuming you've run 'gham repo assign personal' here before)
gham git push # Uses 'personal' context credentials

# 8. Remove a context
gham context remove personal

# 9. Show version
gham version